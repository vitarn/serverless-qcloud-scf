'use strict'

/* eslint no-use-before-define: 0 */

const path = require('path')

const _ = require('lodash')
const BbPromise = require('bluebird')

module.exports = {
  prepareDeployment() {
    const { provider, options, serverless: { service, utils, cli } } = this

    cli.log(`Prepare deployment template`)

    const deploymentTemplate = utils.readFileSync(
      path.join(
        __dirname,
        '..',
        'templates',
        'core-configuration-template.json'))
      
    const { DeploymentBucket } = deploymentTemplate.Resources
    const { region } = service.provider
    const name = `${provider.naming.deploymentBucketPrefix}${region}`

    _.assign(DeploymentBucket, {
      Bucket: name,
      Region: region,
      ACL: 'public-read',
    })

    deploymentTemplate.Resources.CloudFunctions = []

    const functionHasHTTP = service.getAllFunctions().some((functionName) => {
      const funcObject = service.getFunction(functionName)

      return funcObject.events && funcObject.events.some(event => event.http)
    })
    if (functionHasHTTP) {
      if (!deploymentTemplate.Resources.APIGateway) {
        deploymentTemplate.Resources.APIGateway = {
          Region: _.get(options, 'region')
            || _.get(this, 'serverless.service.provider.region')
            || 'gz',
          serviceName: service.service,
          protocol: 'http&https',
          serviceDesc: `API Gateway for Serverless Function Compute service ${service.service}, generated by the Serverless framework.`,
        }
      }
    }

    service.provider.compiledConfigurationTemplate = deploymentTemplate

    return BbPromise.resolve()
  },
}
