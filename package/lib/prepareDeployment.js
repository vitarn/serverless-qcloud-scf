'use strict'

/* eslint no-use-before-define: 0 */

const path = require('path')
const _ = require('lodash')

module.exports = {
  async prepareDeployment() {
    const { provider, options, serverless: { service, utils, cli } } = this

    cli.log(`Prepare deployment template`)

    const deploymentTemplate = utils.readFileSync(
      path.join(
        __dirname,
        '..',
        'templates',
        'core-configuration-template.json'
      )
    )

    const { DeploymentBucket } = deploymentTemplate.Resources
    const { region } = service.provider
    const name = _.get(service, 'provider.deploymentBucket')
      || `${provider.naming.deploymentBucketPrefix}${region}`

    _.assign(DeploymentBucket, {
      Bucket: name,
      Region: region,
      ACL: 'public-read',
    })

    deploymentTemplate.Resources.CloudFunctions = []
    deploymentTemplate.Resources.APIGatewayApis = []

    const functionHasHTTP = service.getAllFunctions().some((functionName) => {
      const funcObject = service.getFunction(functionName)

      return funcObject.events && funcObject.events.some(event => event.http)
    })

    if (functionHasHTTP && !deploymentTemplate.Resources.APIGateway) {
      deploymentTemplate.Resources.APIGateway = {
        Region: _.get(options, 'region')
          || _.get(service, 'provider.region')
          || 'gz',
        serviceName: _.get(service, 'provider.apiGateway.name') || service.service,
        protocol: _.get(service, 'provider.apiGateway.protocol') || 'http&https',
        serviceDesc: _.get(service, 'provider.apiGateway.description')
          || `API Gateway for Serverless Function Compute service ${service.service}, generated by the Serverless framework.`,
      }
    }

    service.provider.compiledConfigurationTemplate = deploymentTemplate
  },
}
